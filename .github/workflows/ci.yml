name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB}}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD}}
      DL_HTML_PATH: ${{ secrets.DL_HTML_PATH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Ruff linter
        run: |
          pip install ruff
          ruff check .

      - uses: actions/checkout@v4
      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          chmod +x /usr/local/bin/yq
      
      - name: Verify proxy flag - dev
        run: |
          FILE="docker/environments/deploy_configs/scaling.dev.yml"
          VALUE=$(yq '.components.crawler.use_proxies' "$FILE" || echo "null")
          if [ "$(echo "$VALUE" | tr '[:upper:]' '[:lower:]')" = "true" ]; then
            echo "::error file=$FILE::use_proxies must be false in dev."
            exit 1
          fi
      
      - name: Verify proxy flag - prod
        run: |
          FILE="docker/environments/deploy_configs/scaling.prod.yml"
          VALUE=$(yq '.components.crawler.use_proxies' "$FILE" || echo "null")
          if [ "$(echo "$VALUE" | tr '[:upper:]' '[:lower:]')" = "true" ]; then
            echo "::error file=$FILE::use_proxies must be false in prod."
            exit 1
          fi

      - name: Generate .env file
        run: |
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> .env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DL_HTML_PATH=${{ secrets.DL_HTML_PATH }}" >> .env

  unit-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB}}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD}}
      DL_HTML_PATH: ${{ secrets.DL_HTML_PATH }}
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -r requirements-common.txt

          for d in components/*; do
            if [ -f "$d/requirements.txt" ]; then
              echo "Installing from $d/requirements.txt"
              cd "$d"
              pip install -r requirements.txt
              cd - > /dev/null
            fi
          done

      - name: Run test suite
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          DB_READER_HOST: http://localhost:8001
        run: PYTHONPATH=${{ github.workspace }} pytest -m "not integration" tests/
        
