name: distributed_system

# Rotating file handler

# IMPORTANT:
#     Not using something to limit log file size (like rotating logs) will slowly but surely 
#     lead to a catastrophic failure. Trust me, your machine or VM will eventually run 
#     out of disk space if you don't.

# REAL EXAMPLE:
#     I learned this the hard way. I ran a simple, single-instance crawler for three 
#     days straight without rotating logs. My VM completely ran out of disk space and 
#     crashed because of all the logs piling up. Don't repeat my mistake!

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

x-crawler-common: &crawler-common
  build:
    context: ..
    dockerfile: components/crawler/Dockerfile
  depends_on:
    - postgres
    - rabbitmq
    - redis
  env_file: .env
  command: [ "python", "-m", "components.crawler.main" ]
  logging: *default-logging
  networks:
    default:
      aliases: [ 'crawler' ]
  volumes:
    - compressed_html_data:/data/html
  environment:
    - NO_PROXY=localhost,127.0.0.1,rabbitmq,redis,postgres,192.168.0.0/16

services:
  # === Infrastructutre ===

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    env_file: .env
    logging: *default-logging
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASSWORD}"

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    logging: *default-logging
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      TZ: America/New_York
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  postgres_initiator:
    container_name: postgres_initiator
    build:
      context: ..
      dockerfile: components/postgres_initiator/Dockerfile
    depends_on:
      - postgres
    env_file: .env # Only used in local dev
    command: [ "python", "-m", "components.postgres_initiator.main" ]

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    logging: *default-logging
    command: redis-server --maxmemory 2147483648 --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"

  # === Crawlers ===

  crawler_noproxy:
    <<: *crawler-common

  # === Parsers ===

  parser:
    build:
      context: ..
      dockerfile: components/parser/Dockerfile
    logging: *default-logging
    depends_on:
      - postgres
      - rabbitmq
    env_file: .env
    command: [ "python", "-m", "components.parser.main" ]
    volumes:
      - compressed_html_data:/data/html

  # === Database Services ===

  db_writer:
    build:
      context: ..
      dockerfile: components/db_writer/Dockerfile
    logging: *default-logging
    env_file: .env
    depends_on:
      - postgres
    command: [ "python", "-m", "components.db_writer.main" ]

  db_reader:
    container_name: db_reader
    build:
      context: ..
      dockerfile: components/db_reader/Dockerfile
    logging: *default-logging
    env_file: .env
    ports:
      - "8001:8001"
    depends_on:
      - postgres
    command: [ "python", "-m", "components.db_reader.main" ]

  # === Scheduler & Dispatcher ===

  scheduler:
    build:
      context: ..
      dockerfile: components/scheduler/Dockerfile
    logging: *default-logging
    env_file: .env
    depends_on:
      - rabbitmq
      - postgres
    environment:
      - DB_READER_HOST=${DB_READER_HOST}
    command: [ "python", "-m", "components.scheduler.main" ]

  dispatcher:
    container_name: dispatcher
    build:
      context: ..
      dockerfile: components/dispatcher/Dockerfile
    logging: *default-logging
    env_file: .env
    depends_on:
      - rabbitmq
      - postgres
      - postgres_initiator
      - db_reader
    environment:
      - DB_READER_HOST=${DB_READER_HOST}
    command: [ "python", "-m", "components.dispatcher.main" ]

  rescheduler:
    container_name: rescheduler
    build:
      context: ..
      dockerfile: components/rescheduler/Dockerfile
    logging: *default-logging
    env_file: .env
    depends_on:
      - rabbitmq
      - postgres
      - postgres_initiator
      - db_reader
    environment:
      - DB_READER_HOST=${DB_READER_HOST}
    command: [ "python", "-m", "components.rescheduler.main" ]

volumes:
  pg_data:
  compressed_html_data:
